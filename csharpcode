using System;
using System.Windows.Forms;
using System.Net;
using Newtonsoft.Json;
using System.Net.Http;
namespace League_Timer
{

    public partial class Form1 : Form
    {
        public class gameLengther
        {
            public string gameLength { get; set; }
        }
        public Form1()
        {
            InitializeComponent();
        }

        private void Form1_Load(object sender, EventArgs e)
        {

        }
        public void jsonGetting()
        {
            try
            {
                using (WebClient wc = new WebClient())
                {
                    var jsonget = "";
                    jsonget = wc.DownloadString("https://na.api.pvp.net/observer-mode/rest/consumer/getSpectatorGameInfo/NA1/SUMMONERIRD?api_key=YOURAPIKEY");
                    //fill in your summoner id and riot api key in that link
                    gameLengther gameTime = JsonConvert.DeserializeObject<gameLengther>(jsonget);
                    int value = Convert.ToInt32(gameTime.gameLength);
                    if ((value > -150) && (value != 0))
                    {
                        textBox1.Text = "true";;
                        using (var client2 = new HttpClient())
                        {
                            var response = client2.GetAsync("https://maker.ifttt.com/trigger/YOUREVENTNAME/with/key/YOURKEY").Result;
                            //fill in your event name and key. Get those at ifttt.com, you'll need a recipe using the maker channel and particle channel
                        }
                    
                    }
                    else
                    {
                        textBox1.Text = "false";
                    }
                }
            }
            catch
            {
                textBox1.Text = "some error";
            }
        }
        private void button1_Click(object sender, EventArgs e) //just an exit button
        {
            Application.Exit();
        }

        private void timer1_Tick_1(object sender, EventArgs e) //add a timer that ticks every 3000 miliseconds so you don't eat up your usage
        {
            jsonGetting();
        }

    }
}
